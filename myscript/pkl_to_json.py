#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PKL to JSON Converter
Chuy·ªÉn ƒë·ªïi file .pkl sang .json v·ªõi x·ª≠ l√Ω ƒë·∫ßy ƒë·ªß c√°c ki·ªÉu d·ªØ li·ªáu
"""

import pickle
import json
import sys
import os
import argparse
from datetime import datetime, date, time
from decimal import Decimal
from pathlib import Path
import numpy as np
import pandas as pd
from collections import OrderedDict, defaultdict
import warnings

class AdvancedJSONEncoder(json.JSONEncoder):
    """Custom JSON encoder ƒë·ªÉ x·ª≠ l√Ω c√°c ki·ªÉu d·ªØ li·ªáu ƒë·∫∑c bi·ªát"""
    
    def default(self, obj):
        # X·ª≠ l√Ω numpy types
        if isinstance(obj, np.integer):
            return int(obj)
        elif isinstance(obj, np.floating):
            return float(obj)
        elif isinstance(obj, np.ndarray):
            return obj.tolist()
        elif isinstance(obj, np.bool_):
            return bool(obj)
        elif isinstance(obj, np.datetime64):
            return str(obj)
        
        # X·ª≠ l√Ω scipy sparse matrices
        elif hasattr(obj, 'toarray') and hasattr(obj, 'nnz'):  # scipy sparse matrix
            return {
                '_type': f'scipy_sparse_{obj.__class__.__name__}',
                'shape': obj.shape,
                'nnz': obj.nnz,
                'data': obj.toarray().tolist(),
                'format': obj.format if hasattr(obj, 'format') else 'unknown'
            }
        
        # X·ª≠ l√Ω pandas types
        elif isinstance(obj, pd.DataFrame):
            return {
                '_type': 'pandas_dataframe',
                'data': obj.to_dict('records'),
                'index': obj.index.tolist(),
                'columns': obj.columns.tolist()
            }
        elif isinstance(obj, pd.Series):
            return {
                '_type': 'pandas_series',
                'data': obj.to_dict(),
                'index': obj.index.tolist(),
                'name': obj.name
            }
        elif isinstance(obj, pd.Timestamp):
            return obj.isoformat()
        elif hasattr(obj, 'to_pydatetime'):  # pandas datetime
            return obj.to_pydatetime().isoformat()
        
        # X·ª≠ l√Ω datetime types
        elif isinstance(obj, datetime):
            return obj.isoformat()
        elif isinstance(obj, date):
            return obj.isoformat()
        elif isinstance(obj, time):
            return obj.isoformat()
        
        # X·ª≠ l√Ω Decimal
        elif isinstance(obj, Decimal):
            return float(obj)
        
        # X·ª≠ l√Ω set
        elif isinstance(obj, set):
            return {
                '_type': 'set',
                'data': list(obj)
            }
        
        # X·ª≠ l√Ω frozenset
        elif isinstance(obj, frozenset):
            return {
                '_type': 'frozenset',
                'data': list(obj)
            }
        
        # X·ª≠ l√Ω tuple
        elif isinstance(obj, tuple):
            return {
                '_type': 'tuple',
                'data': list(obj)
            }
        
        # X·ª≠ l√Ω complex numbers
        elif isinstance(obj, complex):
            return {
                '_type': 'complex',
                'real': obj.real,
                'imag': obj.imag
            }
        
        # X·ª≠ l√Ω bytes
        elif isinstance(obj, bytes):
            try:
                # Th·ª≠ decode v·ªõi utf-8 tr∆∞·ªõc
                return obj.decode('utf-8')
            except UnicodeDecodeError:
                try:
                    # Th·ª≠ decode v·ªõi latin-1
                    return obj.decode('latin-1')
                except UnicodeDecodeError:
                    # N·∫øu kh√¥ng decode ƒë∆∞·ª£c, chuy·ªÉn th√†nh base64
                    import base64
                    return {
                        '_type': 'bytes_base64',
                        'data': base64.b64encode(obj).decode('ascii')
                    }
        
        # X·ª≠ l√Ω bytearray
        elif isinstance(obj, bytearray):
            return {
                '_type': 'bytearray',
                'data': list(obj)
            }
        
        # X·ª≠ l√Ω range
        elif isinstance(obj, range):
            return {
                '_type': 'range',
                'start': obj.start,
                'stop': obj.stop,
                'step': obj.step
            }
        
        # X·ª≠ l√Ω c√°c object c√≥ __dict__
        elif hasattr(obj, '__dict__'):
            result = {
                '_type': f'{obj.__class__.__module__}.{obj.__class__.__name__}',
                'attributes': {}
            }
            for key, value in obj.__dict__.items():
                if not key.startswith('_'):  # B·ªè qua private attributes
                    try:
                        json.dumps(value, cls=AdvancedJSONEncoder)  # Test serializable
                        result['attributes'][key] = value
                    except (TypeError, ValueError):
                        result['attributes'][key] = f"<non-serializable: {type(value).__name__}>"
            return result
        
        # X·ª≠ l√Ω callable objects
        elif callable(obj):
            return f"<function: {getattr(obj, '__name__', str(obj))}>"
        
        # Fallback cho c√°c object kh√°c
        else:
            return f"<{type(obj).__name__}: {str(obj)}>"

def analyze_data_structure(data, max_depth=3, current_depth=0):
    """Ph√¢n t√≠ch c·∫•u tr√∫c d·ªØ li·ªáu"""
    if current_depth >= max_depth:
        return f"<max_depth_reached: {type(data).__name__}>"
    
    analysis = {
        'type': type(data).__name__,
        'size': None,
        'sample': None
    }
    
    if isinstance(data, (list, tuple)):
        analysis['size'] = len(data)
        if data:
            analysis['sample'] = analyze_data_structure(data[0], max_depth, current_depth + 1)
    elif isinstance(data, dict):
        analysis['size'] = len(data)
        analysis['keys'] = list(data.keys())[:10]  # First 10 keys
        if data:
            first_key = next(iter(data.keys()))
            analysis['sample'] = {
                'key': first_key,
                'value': analyze_data_structure(data[first_key], max_depth, current_depth + 1)
            }
    elif isinstance(data, str):
        analysis['size'] = len(data)
        analysis['sample'] = data[:100] + ('...' if len(data) > 100 else '')
    elif hasattr(data, '__len__'):
        try:
            analysis['size'] = len(data)
        except:
            pass
    
    return analysis

def convert_pkl_to_json(input_file, output_file=None, pretty=True, analyze=True, safe_mode=True):
    """
    Chuy·ªÉn ƒë·ªïi file .pkl sang .json
    
    Args:
        input_file (str): ƒê∆∞·ªùng d·∫´n file .pkl
        output_file (str, optional): ƒê∆∞·ªùng d·∫´n file .json output
        pretty (bool): Format JSON ƒë·∫πp
        analyze (bool): Hi·ªÉn th·ªã ph√¢n t√≠ch c·∫•u tr√∫c
        safe_mode (bool): Ch·∫ø ƒë·ªô an to√†n (kh√¥ng load code t√πy √Ω)
    """
    
    # Ki·ªÉm tra file input
    if not os.path.exists(input_file):
        raise FileNotFoundError(f"File kh√¥ng t·ªìn t·∫°i: {input_file}")
    
    # T·∫°o t√™n file output n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if output_file is None:
        base_name = os.path.splitext(input_file)[0]
        output_file = f"{base_name}.json"
    
    print(f"üîÑ ƒêang chuy·ªÉn ƒë·ªïi: {input_file} -> {output_file}")
    
    try:
        # ƒê·ªçc file pickle
        print("üìñ ƒêang ƒë·ªçc file pickle...")
        
        if safe_mode:
            # Ch·∫ø ƒë·ªô an to√†n - h·∫°n ch·∫ø c√°c module c√≥ th·ªÉ ƒë∆∞·ª£c import
            class RestrictedUnpickler(pickle.Unpickler):
                def find_class(self, module, name):
                    # Danh s√°ch c√°c module ƒë∆∞·ª£c ph√©p
                    safe_modules = [
                        'builtins', '__builtin__', 'copy_reg', 'copyreg',
                        'numpy', 'pandas', 'datetime', 'decimal', 'collections',
                        'scipy', 'scipy.sparse'
                    ]
                    if module.split('.')[0] in safe_modules:
                        return super().find_class(module, name)
                    raise pickle.UnpicklingError(f"Kh√¥ng ƒë∆∞·ª£c ph√©p import module: {module}")
            
            with open(input_file, 'rb') as f:
                unpickler = RestrictedUnpickler(f)
                unpickler.encoding = 'latin-1'  # Set encoding to handle binary data
                data = unpickler.load()
        else:
            with open(input_file, 'rb') as f:
                # Th·ª≠ v·ªõi encoding kh√°c nhau
                try:
                    data = pickle.load(f)
                except UnicodeDecodeError:
                    f.seek(0)
                    data = pickle.load(f, encoding='latin-1')
                except Exception as e:
                    f.seek(0)
                    try:
                        data = pickle.load(f, encoding='bytes')
                    except:
                        raise e
        
        print("‚úÖ ƒê·ªçc file pickle th√†nh c√¥ng!")
        
        # Ph√¢n t√≠ch c·∫•u tr√∫c n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if analyze:
            print("\nüìä Ph√¢n t√≠ch c·∫•u tr√∫c d·ªØ li·ªáu:")
            structure = analyze_data_structure(data)
            print(json.dumps(structure, indent=2, cls=AdvancedJSONEncoder, ensure_ascii=False))
        
        # Chuy·ªÉn ƒë·ªïi sang JSON
        print("\nüîÑ ƒêang chuy·ªÉn ƒë·ªïi sang JSON...")
        
        if pretty:
            json_str = json.dumps(
                data, 
                cls=AdvancedJSONEncoder, 
                indent=2, 
                ensure_ascii=False,
                sort_keys=True
            )
        else:
            json_str = json.dumps(
                data, 
                cls=AdvancedJSONEncoder, 
                ensure_ascii=False,
                separators=(',', ':')
            )
        
        # Ghi file JSON
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(json_str)
        
        print(f"‚úÖ Chuy·ªÉn ƒë·ªïi th√†nh c√¥ng!")
        print(f"üìÅ File output: {output_file}")
        print(f"üìè K√≠ch th∆∞·ªõc: {len(json_str):,} k√Ω t·ª±")
        
        # Hi·ªÉn th·ªã preview
        if len(json_str) > 1000:
            print(f"\nüëÄ Preview (1000 k√Ω t·ª± ƒë·∫ßu):")
            print(json_str[:1000] + "...")
        else:
            print(f"\nüëÄ N·ªôi dung:")
            print(json_str)
            
    except pickle.UnpicklingError as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc pickle: {e}")
        if safe_mode:
            print("üí° Th·ª≠ ch·∫°y l·∫°i v·ªõi --no-safe-mode n·∫øu b·∫°n tin t∆∞·ªüng file n√†y")
        raise
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        raise

def batch_convert(input_dir, output_dir=None, **kwargs):
    """Chuy·ªÉn ƒë·ªïi h√†ng lo·∫°t c√°c file .pkl trong th∆∞ m·ª•c"""
    
    input_path = Path(input_dir)
    if not input_path.exists():
        raise FileNotFoundError(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {input_dir}")
    
    # T·∫°o th∆∞ m·ª•c output n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if output_dir is None:
        output_path = input_path / "json_output"
    else:
        output_path = Path(output_dir)
    
    output_path.mkdir(exist_ok=True)
    
    # T√¨m t·∫•t c·∫£ file .pkl
    pkl_files = list(input_path.glob("*.pkl")) + list(input_path.glob("*.pickle"))
    
    if not pkl_files:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file .pkl n√†o trong th∆∞ m·ª•c")
        return
    
    print(f"üîç T√¨m th·∫•y {len(pkl_files)} file(s) .pkl")
    
    success_count = 0
    for pkl_file in pkl_files:
        try:
            output_file = output_path / f"{pkl_file.stem}.json"
            print(f"\n--- X·ª≠ l√Ω: {pkl_file.name} ---")
            
            convert_pkl_to_json(str(pkl_file), str(output_file), **kwargs)
            success_count += 1
            
        except Exception as e:
            print(f"‚ùå L·ªói khi x·ª≠ l√Ω {pkl_file.name}: {e}")
    
    print(f"\nüéâ Ho√†n th√†nh! {success_count}/{len(pkl_files)} file ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh c√¥ng")

def main():
    parser = argparse.ArgumentParser(
        description="Chuy·ªÉn ƒë·ªïi file .pkl sang .json",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
V√≠ d·ª• s·ª≠ d·ª•ng:
  python pkl_to_json.py data.pkl                    # Chuy·ªÉn ƒë·ªïi m·ªôt file
  python pkl_to_json.py data.pkl -o output.json     # Ch·ªâ ƒë·ªãnh file output
  python pkl_to_json.py -d ./data_folder             # Chuy·ªÉn ƒë·ªïi h√†ng lo·∫°t
  python pkl_to_json.py data.pkl --no-pretty        # JSON kh√¥ng format
  python pkl_to_json.py data.pkl --no-safe-mode     # T·∫Øt ch·∫ø ƒë·ªô an to√†n
        """
    )
    
    # Arguments ch√≠nh
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("input_file", nargs="?", help="File .pkl c·∫ßn chuy·ªÉn ƒë·ªïi")
    group.add_argument("-d", "--directory", help="Th∆∞ m·ª•c ch·ª©a c√°c file .pkl")
    
    # Options
    parser.add_argument("-o", "--output", help="File JSON output")
    parser.add_argument("--output-dir", help="Th∆∞ m·ª•c output cho batch convert")
    parser.add_argument("--no-pretty", action="store_true", help="Kh√¥ng format JSON ƒë·∫πp")
    parser.add_argument("--no-analyze", action="store_true", help="Kh√¥ng ph√¢n t√≠ch c·∫•u tr√∫c")
    parser.add_argument("--no-safe-mode", action="store_true", help="T·∫Øt ch·∫ø ƒë·ªô an to√†n")
    
    args = parser.parse_args()
    
    # Suppress pandas warnings
    warnings.filterwarnings('ignore')
    
    try:
        if args.directory:
            # Batch convert
            batch_convert(
                args.directory,
                args.output_dir,
                pretty=not args.no_pretty,
                analyze=not args.no_analyze,
                safe_mode=not args.no_safe_mode
            )
        else:
            # Single file convert
            convert_pkl_to_json(
                args.input_file,
                args.output,
                pretty=not args.no_pretty,
                analyze=not args.no_analyze,
                safe_mode=not args.no_safe_mode
            )
            
    except KeyboardInterrupt:
        print("\n‚ùå ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()